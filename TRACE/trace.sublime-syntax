%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
scope: text.trace

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments
    - include: invalid_input

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    #- include: array_operators
    - include: numbers
    #- include: strings

  keywords:
    - match: '(?i)\b(break|fill|flpower|htstr|pipe|plenum|power|pump|vessel)\b'
      scope: keyword.component.trace

  #array_operators:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    

  numbers:
    - match: '\b(f)\b'
      scope: entity.name.function.fill.trace
    - match: '\b((m|r|i)\s*[0-9]+)\b'
      scope: entity.name.function.array_operation.trace
    - match: '\b(([-+]?[0-9]+\.[0-9]+)(?:[eE]([-+]?[0-9]+))?)'
      scope: constant.numeric.float.trace
    - match: '\b(-)?[0-9]+'
      scope: constant.numeric.integer.trace
    - match: '((?<=[0-9])\s*(e|s)\s)'
      scope: keyword.array.end_or_skip.trace

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.trace
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.trace
    - match: '\.'
      scope: constant.character.escape.trace
    - match: '"'
      scope: punctuation.definition.string.end.trace
      pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '\*+'
      scope: punctuation.definition.comment.trace
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.trace
        - match: $\n?
          pop: true
        - match: '\*+'
          scope: comment.block.trace
          pop: true

  invalid_input:
    - match: '\t'
      scope: invalid.illegal.trace
          